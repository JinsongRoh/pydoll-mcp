[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pydoll-mcp"
version = "1.14.0"
description = "Revolutionary Model Context Protocol (MCP) server for PyDoll browser automation with zero-webdriver operation and intelligent captcha bypass"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Jinsong Roh", email = "jinsongroh@gmail.com"}
]
maintainers = [
    {name = "Jinsong Roh", email = "jinsongroh@gmail.com"}
]
keywords = [
    "mcp", "browser-automation", "web-scraping", "captcha-bypass", 
    "claude", "ai", "automation", "testing", "selenium-alternative",
    "cloudflare", "recaptcha", "anti-detection", "stealth"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Environment :: Console",
    "Framework :: AsyncIO",
]
requires-python = ">=3.8"
dependencies = [
    "pydoll-python>=2.2.0",
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "asyncio-throttle>=1.0.0",
    "aiofiles>=23.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/JinsongRoh/pydoll-mcp"
Documentation = "https://github.com/JinsongRoh/pydoll-mcp/wiki"
Repository = "https://github.com/JinsongRoh/pydoll-mcp"
Issues = "https://github.com/JinsongRoh/pydoll-mcp/issues"
Changelog = "https://github.com/JinsongRoh/pydoll-mcp/blob/main/CHANGELOG.md"
Sponsor = "https://github.com/sponsors/JinsongRoh"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "tox>=4.0.0",
]
testing = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "sphinx-click>=4.4.0",
]
performance = [
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "orjson>=3.8.0",
    "msgpack>=1.0.5",
    "lz4>=4.3.2",
]
security = [
    "cryptography>=41.0.0",
    "pycryptodome>=3.18.0",
    "passlib[bcrypt]>=1.7.4",
]
all = [
    "pydoll-mcp[dev,testing,docs,performance,security]"
]

[project.scripts]
pydoll-mcp = "pydoll_mcp.server:main"
pydoll-mcp-server = "pydoll_mcp.server:main"
pydoll-mcp-test = "pydoll_mcp.cli:main"
pydoll-mcp-cli = "pydoll_mcp.cli:main"

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["pydoll_mcp*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
pydoll_mcp = [
    "py.typed",
    "*.json",
    "*.yaml",
    "*.yml",
    "templates/*",
    "static/*",
]

[tool.setuptools.dynamic]
version = {attr = "pydoll_mcp.__version__"}

# Development Tools Configuration

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pydoll_mcp"]
known_third_party = ["pydoll", "mcp", "pydantic", "click", "rich"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [".git", "__pycache__", "build", "dist", ".tox", ".venv", "migrations"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pydoll.*",
    "mcp.*",
    "rich.*",
    "click.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v --tb=short --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests", 
    "slow: Slow tests",
    "network: Tests requiring network access",
    "browser: Tests requiring browser",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["pydoll_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/*test*.py", "*/test_*"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312,lint,security,docs
isolated_build = true

[testenv]
deps = 
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.0.0
commands = pytest {posargs}

[testenv:lint]
deps = 
    black>=23.0.0
    isort>=5.12.0
    flake8>=6.0.0
    mypy>=1.0.0
commands = 
    black --check .
    isort --check-only .
    flake8 .
    mypy .

[testenv:security]
deps = 
    bandit[toml]>=1.7.5
    safety>=2.3.0
commands = 
    bandit -r pydoll_mcp
    safety check

[testenv:docs]
deps = 
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.2.0
commands = sphinx-build -W -b html docs docs/_build

"""

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variable = "pydoll_mcp/__init__.py:__version__"
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_pypi = true
upload_to_release = true
hvcs = "github"
commit_author = "Jinsong Roh <jinsongroh@gmail.com>"
