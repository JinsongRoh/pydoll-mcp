name: Release & Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Build Distribution Packages
  build:
    name: Build Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
        
    - name: Verify package configuration
      run: |
        check-manifest
        python -m pip install -e .
        python -c "import pydoll_mcp; print(f'Package version: {pydoll_mcp.__version__}')"
        
    - name: Build distributions
      run: |
        python -m build
        
    - name: Verify distributions
      run: |
        twine check dist/*
        ls -la dist/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  # GitHub Release
  github-release:
    name: Create GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.clean_version }}"
        cat << EOF > release_notes.md
        # 🚀 PyDoll MCP Server v${VERSION}
        
        ## 🌟 What's New
        
        PyDoll MCP Server brings revolutionary browser automation capabilities to Claude and other MCP clients!
        
        ### 🔥 Key Features
        - **Zero WebDrivers**: Direct Chrome DevTools Protocol communication
        - **AI-Powered Captcha Bypass**: Automatic Cloudflare Turnstile & reCAPTCHA v3 solving
        - **Human Behavior Simulation**: Undetectable automation
        - **77+ Tools**: Comprehensive browser automation toolkit
        - **Cross-Platform**: Windows, Linux, macOS support
        
        ### 📦 Installation
        \`\`\`bash
        pip install pydoll-mcp
        \`\`\`
        
        ### 🔧 Quick Setup for Claude Desktop
        \`\`\`json
        {
          "mcpServers": {
            "pydoll": {
              "command": "python",
              "args": ["-m", "pydoll_mcp.server"]
            }
          }
        }
        \`\`\`
        
        ### 📚 Resources
        - 📖 [Documentation](https://github.com/JinsongRoh/pydoll-mcp/wiki)
        - 🏠 [PyPI Package](https://pypi.org/project/pydoll-mcp/)
        - 🐳 [Docker Hub](https://hub.docker.com/r/jinsongroh/pydoll-mcp)
        - 💬 [Discussions](https://github.com/JinsongRoh/pydoll-mcp/discussions)
        
        ## 🙏 Acknowledgments
        Built on the amazing [PyDoll](https://github.com/autoscrape-labs/pydoll) library!
        
        ---
        
        **Full Changelog**: https://github.com/JinsongRoh/pydoll-mcp/blob/main/CHANGELOG.md
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "PyDoll MCP Server ${{ steps.version.outputs.version }}"
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # PyPI Publication
  pypi-publish:
    name: Publish to PyPI
    needs: [github-release]
    runs-on: ubuntu-latest
    
    environment:
      name: pypi
      url: https://pypi.org/p/pydoll-mcp
      
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code (for security verification)
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Security verification
      run: |
        # Verify no sensitive files in distribution
        echo "🔍 Security verification of package contents..."
        
        # Check for sensitive patterns in package
        if find dist/ -name "*.tar.gz" -exec tar -tzf {} \; | grep -E "(\.env|\.secret|key|token|password)" 2>/dev/null; then
          echo "❌ Sensitive files detected in package!"
          exit 1
        fi
        
        # Verify package integrity
        python -m pip install --upgrade pip twine
        twine check dist/* --strict
        
        echo "✅ Security verification passed"
        
    - name: Verify package contents
      run: |
        ls -la dist/
        echo "📦 Ready to publish:"
        for file in dist/*; do
          echo "  - $(basename $file)"
          # Show package size for verification
          echo "    Size: $(du -h "$file" | cut -f1)"
        done
        
    - name: Verify PyPI token is configured
      run: |
        if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
          echo "❌ PYPI_API_TOKEN secret not configured"
          echo "Please follow SECURITY_SETUP.md to configure secrets"
          exit 1
        fi
        echo "✅ PYPI_API_TOKEN is configured"
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        verify-metadata: true
        skip-existing: true
        
  # Test PyPI Installation
  test-installation:
    name: Test PyPI Installation
    needs: [pypi-publish]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11', '3.12']
        
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Wait for PyPI propagation
      run: sleep 120
      
    - name: Install from PyPI
      run: |
        python -m pip install --upgrade pip
        pip install pydoll-mcp
        
    - name: Test installation
      run: |
        python -c "import pydoll_mcp; print(f'✅ Successfully installed pydoll-mcp v{pydoll_mcp.__version__}')"
        python -m pydoll_mcp.server --help
        
  # Update Smithery.ai Registry
  update-smithery:
    name: Update Smithery.ai Registry
    needs: [pypi-publish]
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Smithery.ai secrets
      run: |
        echo "🔍 Verifying Smithery.ai configuration..."
        
        if [ -z "${{ secrets.SMITHERY_API_KEY }}" ]; then
          echo "❌ SMITHERY_API_KEY secret not configured"
          echo "Please follow SECURITY_SETUP.md to configure secrets"
          exit 1
        fi
        
        if [ -z "${{ secrets.SMITHERY_PROFILE }}" ]; then
          echo "❌ SMITHERY_PROFILE secret not configured"
          echo "Please follow SECURITY_SETUP.md to configure secrets"
          exit 1
        fi
        
        echo "✅ Smithery.ai secrets are configured"
    
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        CLEAN_VERSION="${VERSION#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "clean_version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted version: ${CLEAN_VERSION}"
    
    - name: Update Smithery.ai registry
      run: |
        VERSION="${{ steps.version.outputs.clean_version }}"
        
        # Create Smithery.ai payload with comprehensive metadata
        cat > smithery_payload.json << EOF
        {
          "name": "pydoll-mcp",
          "description": "Revolutionary browser automation MCP server powered by PyDoll 2.3.1 with advanced captcha bypass, stealth capabilities, and 58 comprehensive automation tools",
          "version": "$VERSION",
          "author": "Jinsong Roh",
          "license": "MIT",
          "keywords": [
            "browser-automation",
            "mcp",
            "captcha-bypass", 
            "stealth",
            "pydoll",
            "claude",
            "ai-automation",
            "web-scraping",
            "selenium-alternative",
            "chrome-devtools"
          ],
          "homepage": "https://github.com/JinsongRoh/pydoll-mcp",
          "repository": "https://github.com/JinsongRoh/pydoll-mcp",
          "documentation": "https://github.com/JinsongRoh/pydoll-mcp/wiki",
          "installation": {
            "type": "pip",
            "package": "pydoll-mcp",
            "version": "$VERSION",
            "command": "pip install pydoll-mcp==$VERSION"
          },
          "configuration": {
            "command": "python",
            "args": ["-m", "pydoll_mcp.server"],
            "env": {
              "PYDOLL_LOG_LEVEL": "INFO",
              "PYTHONIOENCODING": "utf-8"
            }
          },
          "capabilities": {
            "browser_automation": true,
            "captcha_bypass": true,
            "network_monitoring": true,
            "element_finding": true,
            "javascript_execution": true,
            "stealth_mode": true,
            "screenshot_capture": true,
            "multi_browser_support": true,
            "human_like_interaction": true,
            "protection_bypass": true,
            "file_management": true
          },
          "tools_count": 58,
          "categories": [
            "browser-management",
            "navigation-control", 
            "element-interaction",
            "screenshot-media",
            "script-execution",
            "advanced-automation",
            "protection-bypass",
            "network-monitoring",
            "file-management"
          ],
          "dependencies": {
            "pydoll_version": "2.3.1",
            "python_requirement": ">=3.8",
            "mcp_version": ">=1.0.0"
          },
          "platforms": ["windows", "macos", "linux"],
          "features": {
            "zero_webdriver": true,
            "chrome_devtools_protocol": true,
            "cloudflare_bypass": true,
            "recaptcha_bypass": true,
            "anti_detection": true,
            "human_simulation": true,
            "network_interception": true,
            "api_monitoring": true
          },
          "updated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "release_notes": "https://github.com/JinsongRoh/pydoll-mcp/releases/tag/v$VERSION"
        }
        EOF
        
        echo "📡 Updating Smithery.ai registry for PyDoll MCP Server v$VERSION..."
        
        # Update Smithery.ai using secure API endpoint (secrets required)
        RESPONSE=$(curl -w "%{http_code}" -s -o response_body.txt -X POST \
          "https://server.smithery.ai/@smithery-ai/github/mcp" \
          -H "Content-Type: application/json" \
          -H "User-Agent: PyDoll-MCP-GitHub-Actions/1.0" \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.SMITHERY_API_KEY }}" \
          -H "X-Profile-ID: ${{ secrets.SMITHERY_PROFILE }}" \
          -d @smithery_payload.json)
        
        echo "HTTP Response Code: $RESPONSE"
        echo "Response Body:"
        cat response_body.txt
        
        if [[ "$RESPONSE" =~ ^2[0-9][0-9]$ ]]; then
          echo "✅ Smithery.ai registry updated successfully!"
          echo "Registry should be updated within 5-10 minutes"
        else
          echo "❌ Smithery.ai update failed with HTTP $RESPONSE"
          echo "Response details:"
          cat response_body.txt
          
          # Don't fail the workflow for Smithery.ai issues (optional service)
          echo "⚠️  Smithery.ai update failed, but continuing workflow"
          echo "You can manually update the registry later"
        fi
        
        # Secure cleanup - ensure sensitive data is removed
        if [ -f smithery_payload.json ]; then
          shred -vfz -n 3 smithery_payload.json 2>/dev/null || rm -f smithery_payload.json
        fi
        if [ -f response_body.txt ]; then
          shred -vfz -n 3 response_body.txt 2>/dev/null || rm -f response_body.txt
        fi
        
        echo "🧹 Cleanup completed"

  # Post-Release Notifications
  notify:
    name: Post-Release Notifications
    needs: [test-installation, update-smithery]
    runs-on: ubuntu-latest
    
    steps:
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
    - name: Send success notification
      run: |
        echo "🎉 PyDoll MCP Server ${{ steps.version.outputs.version }} successfully released!"
        echo ""
        echo "📦 PyPI: https://pypi.org/project/pydoll-mcp/"
        echo "📋 GitHub Release: https://github.com/JinsongRoh/pydoll-mcp/releases/tag/${{ steps.version.outputs.version }}"
        echo "📚 Documentation: https://github.com/JinsongRoh/pydoll-mcp/wiki"
        echo "🔍 Smithery.ai: https://smithery.ai/package/pydoll-mcp"
        echo ""
        echo "🚀 Users can now install with: pip install pydoll-mcp"
        echo "🔧 Automatically available in MCP registries!"
