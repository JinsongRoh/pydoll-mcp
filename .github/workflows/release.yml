name: Release & Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Build Distribution Packages
  build:
    name: Build Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
        
    - name: Verify package configuration
      run: |
        check-manifest
        python -m pip install -e .
        python -c "import pydoll_mcp; print(f'Package version: {pydoll_mcp.__version__}')"
        
    - name: Build distributions
      run: |
        python -m build
        
    - name: Verify distributions
      run: |
        twine check dist/*
        ls -la dist/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # GitHub Release
  github-release:
    name: Create GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.clean_version }}"
        
        # Check if release notes file exists
        RELEASE_NOTES_FILE="RELEASE_NOTES_v${VERSION}.md"
        if [ -f "$RELEASE_NOTES_FILE" ]; then
          echo "üìã Using existing release notes from $RELEASE_NOTES_FILE"
          cp "$RELEASE_NOTES_FILE" release_notes.md
        else
          echo "üìù Generating default release notes"
          cat << EOF > release_notes.md
        # üöÄ PyDoll MCP Server v${VERSION}
        
        ## üåü What's New
        
        PyDoll MCP Server brings revolutionary browser automation capabilities to Claude and other MCP clients!
        
        ### üî• Key Features
        - **Zero WebDrivers**: Direct Chrome DevTools Protocol communication
        - **AI-Powered Captcha Bypass**: Automatic Cloudflare Turnstile & reCAPTCHA v3 solving
        - **Human Behavior Simulation**: Undetectable automation
        - **79+ Tools**: Comprehensive browser automation toolkit
        - **Cross-Platform**: Windows, Linux, macOS support
        
        ### üì¶ Installation
        \`\`\`bash
        pip install pydoll-mcp==${VERSION}
        \`\`\`
        
        ### üîß Quick Setup for Claude Desktop
        \`\`\`json
        {
          "mcpServers": {
            "pydoll": {
              "command": "python",
              "args": ["-m", "pydoll_mcp.server"],
              "env": {
                "PYDOLL_LOG_LEVEL": "INFO",
                "PYTHONIOENCODING": "utf-8"
              }
            }
          }
        }
        \`\`\`
        
        ### üìö Resources
        - üìñ [Documentation](https://github.com/JinsongRoh/pydoll-mcp/wiki)
        - üè† [PyPI Package](https://pypi.org/project/pydoll-mcp/)
        - üîç [Smithery.ai Registry](https://smithery.ai/server/@JinsongRoh/pydoll-mcp)
        - üê≥ [Docker Hub](https://hub.docker.com/r/jinsongroh/pydoll-mcp)
        - üí¨ [Discussions](https://github.com/JinsongRoh/pydoll-mcp/discussions)
        
        ### üìã Release Notes
        - üìÑ [Detailed Release Notes](https://github.com/JinsongRoh/pydoll-mcp/blob/main/RELEASE_NOTES_v${VERSION}.md)
        
        ## üôè Acknowledgments
        Built on the amazing [PyDoll](https://github.com/autoscrape-labs/pydoll) library!
        
        ---
        
        **Full Changelog**: https://github.com/JinsongRoh/pydoll-mcp/blob/main/CHANGELOG.md
        EOF
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "PyDoll MCP Server ${{ steps.version.outputs.version }}"
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # PyPI Publication
  pypi-publish:
    name: Publish to PyPI
    needs: [github-release]
    runs-on: ubuntu-latest
    
    environment:
      name: pypi
      url: https://pypi.org/p/pydoll-mcp
      
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code (for security verification)
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Security verification
      run: |
        # Verify no sensitive files in distribution
        echo "üîç Security verification of package contents..."
        
        # Define sensitive patterns to check
        SENSITIVE_PATTERNS="(\.env|\.secret|\.pypirc|token|password|api_key|secret_key|private_key)"
        SENSITIVE_EXTENSIONS="(pem|key|crt|p12|pfx|jks)"
        
        # Check for sensitive patterns in package
        echo "Checking for sensitive files..."
        for package in dist/*.tar.gz; do
          if [ -f "$package" ]; then
            echo "Scanning: $(basename $package)"
            if tar -tzf "$package" | grep -iE "${SENSITIVE_PATTERNS}|.*\.${SENSITIVE_EXTENSIONS}$" 2>/dev/null; then
              echo "‚ùå Sensitive files detected in package!"
              exit 1
            fi
          fi
        done
        
        # Check wheel files too
        for wheel in dist/*.whl; do
          if [ -f "$wheel" ]; then
            echo "Scanning: $(basename $wheel)"
            if unzip -l "$wheel" | grep -iE "${SENSITIVE_PATTERNS}|.*\.${SENSITIVE_EXTENSIONS}$" 2>/dev/null; then
              echo "‚ùå Sensitive files detected in wheel!"
              exit 1
            fi
          fi
        done
        
        # Verify package integrity
        python -m pip install --upgrade pip twine
        twine check dist/* --strict
        
        echo "‚úÖ Security verification passed - no sensitive files found"
        
    - name: Verify package contents
      run: |
        ls -la dist/
        echo "üì¶ Ready to publish:"
        for file in dist/*; do
          echo "  - $(basename $file)"
          # Show package size for verification
          echo "    Size: $(du -h "$file" | cut -f1)"
        done
        
    - name: Verify PyPI token is configured
      run: |
        # Never print or log the actual token value
        # Only check if the secret exists without exposing it
        if [ -n "${{ secrets.PYPI_API_TOKEN }}" ]; then
          echo "‚úÖ PYPI_API_TOKEN is configured"
          # Verify token format without exposing it
          TOKEN_LENGTH=${#PYPI_TOKEN}
          if [ $TOKEN_LENGTH -lt 20 ]; then
            echo "‚ùå PYPI_API_TOKEN appears to be invalid (too short)"
            exit 1
          fi
        else
          echo "‚ùå PYPI_API_TOKEN secret not configured"
          echo "Please follow SECURITY_SETUP.md to configure secrets"
          echo "Required: A valid PyPI API token starting with 'pypi-'"
          exit 1
        fi
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        verify-metadata: true
        skip-existing: true
        print-hash: true  # Print package hashes for verification
      env:
        # Ensure secure token handling
        TWINE_NON_INTERACTIVE: 1
        
  # Test PyPI Installation
  test-installation:
    name: Test PyPI Installation
    needs: [pypi-publish]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11', '3.12']
        
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Wait for PyPI propagation
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          powershell -Command "Start-Sleep -Seconds 120"
        else
          sleep 120
        fi
      
    - name: Install from PyPI
      run: |
        python -m pip install --upgrade pip
        # Try to install with retries in case of propagation delay
        for i in {1..3}; do
          if pip install pydoll-mcp --no-cache-dir; then
            echo "‚úÖ Installation successful on attempt $i"
            break
          else
            echo "‚ö†Ô∏è  Installation failed on attempt $i, retrying in 30s..."
            if [ "${{ runner.os }}" == "Windows" ]; then
              powershell -Command "Start-Sleep -Seconds 30"
            else
              sleep 30
            fi
          fi
        done
        
    - name: Test installation
      run: |
        python -c "import pydoll_mcp; print(f'‚úÖ Successfully installed pydoll-mcp v{pydoll_mcp.__version__}')"
        python -m pydoll_mcp.server --help
        
  # Update Smithery.ai Registry
  update-smithery:
    name: Update Smithery.ai Registry
    needs: [pypi-publish]
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Smithery.ai secrets
      run: |
        echo "üîç Verifying Smithery.ai configuration..."
        
        # Check secrets without exposing values
        MISSING_SECRETS=""
        
        if [ -n "${{ secrets.SMITHERY_API_KEY }}" ]; then
          echo "‚úÖ SMITHERY_API_KEY is configured"
        else
          MISSING_SECRETS="${MISSING_SECRETS} SMITHERY_API_KEY"
        fi
        
        if [ -n "${{ secrets.SMITHERY_PROFILE }}" ]; then
          echo "‚úÖ SMITHERY_PROFILE is configured"
        else
          MISSING_SECRETS="${MISSING_SECRETS} SMITHERY_PROFILE"
        fi
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo "‚ùå Missing secrets:$MISSING_SECRETS"
          echo "Please follow SECURITY_SETUP.md to configure secrets"
          echo "‚ö†Ô∏è  Smithery.ai update will be skipped (non-critical)"
          # Don't fail the workflow - Smithery.ai is optional
          echo "skip_smithery=true" >> $GITHUB_ENV
        else
          echo "‚úÖ All Smithery.ai secrets are configured"
          echo "skip_smithery=false" >> $GITHUB_ENV
        fi
    
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        CLEAN_VERSION="${VERSION#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "clean_version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted version: ${CLEAN_VERSION}"
    
    - name: Update Smithery.ai registry
      if: env.skip_smithery != 'true'
      run: |
        VERSION="${{ steps.version.outputs.clean_version }}"
        
        # Create Smithery.ai payload with comprehensive metadata
        cat > smithery_payload.json << EOF
        {
          "name": "pydoll-mcp",
          "description": "Revolutionary browser automation MCP server powered by PyDoll 2.3.1 with advanced captcha bypass, stealth capabilities, and 58 comprehensive automation tools",
          "version": "$VERSION",
          "author": "Jinsong Roh",
          "license": "MIT",
          "keywords": [
            "browser-automation",
            "mcp",
            "captcha-bypass", 
            "stealth",
            "pydoll",
            "claude",
            "ai-automation",
            "web-scraping",
            "selenium-alternative",
            "chrome-devtools"
          ],
          "homepage": "https://github.com/JinsongRoh/pydoll-mcp",
          "repository": "https://github.com/JinsongRoh/pydoll-mcp",
          "documentation": "https://github.com/JinsongRoh/pydoll-mcp/wiki",
          "installation": {
            "type": "pip",
            "package": "pydoll-mcp",
            "version": "$VERSION",
            "command": "pip install pydoll-mcp==$VERSION"
          },
          "configuration": {
            "command": "python",
            "args": ["-m", "pydoll_mcp.server"],
            "env": {
              "PYDOLL_LOG_LEVEL": "INFO",
              "PYTHONIOENCODING": "utf-8"
            }
          },
          "capabilities": {
            "browser_automation": true,
            "captcha_bypass": true,
            "network_monitoring": true,
            "element_finding": true,
            "javascript_execution": true,
            "stealth_mode": true,
            "screenshot_capture": true,
            "multi_browser_support": true,
            "human_like_interaction": true,
            "protection_bypass": true,
            "file_management": true
          },
          "tools_count": 79,
          "categories": [
            "browser-management",
            "navigation-control", 
            "element-interaction",
            "screenshot-media",
            "script-execution",
            "advanced-automation",
            "protection-bypass",
            "network-monitoring",
            "file-management"
          ],
          "dependencies": {
            "pydoll_version": "2.3.1",
            "python_requirement": ">=3.8",
            "mcp_version": ">=1.0.0"
          },
          "platforms": ["windows", "macos", "linux"],
          "features": {
            "zero_webdriver": true,
            "chrome_devtools_protocol": true,
            "cloudflare_bypass": true,
            "recaptcha_bypass": true,
            "anti_detection": true,
            "human_simulation": true,
            "network_interception": true,
            "api_monitoring": true
          },
          "updated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "release_notes": "https://github.com/JinsongRoh/pydoll-mcp/releases/tag/v$VERSION"
        }
        EOF
        
        echo "üì° Updating Smithery.ai registry for PyDoll MCP Server v$VERSION..."
        
        # Update Smithery.ai using secure API endpoint (secrets required)
        RESPONSE=$(curl -w "%{http_code}" -s -o response_body.txt -X POST \
          "https://server.smithery.ai/@smithery-ai/github/mcp" \
          -H "Content-Type: application/json" \
          -H "User-Agent: PyDoll-MCP-GitHub-Actions/1.0" \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.SMITHERY_API_KEY }}" \
          -H "X-Profile-ID: ${{ secrets.SMITHERY_PROFILE }}" \
          -d @smithery_payload.json)
        
        echo "HTTP Response Code: $RESPONSE"
        
        # Only show non-sensitive response info
        if [ -f response_body.txt ]; then
          # Filter out any potential sensitive information from response
          grep -v -E "(token|key|secret|password)" response_body.txt | head -20 || true
        fi
        
        if [[ "$RESPONSE" =~ ^2[0-9][0-9]$ ]]; then
          echo "‚úÖ Smithery.ai registry updated successfully!"
          echo "Registry should be updated within 5-10 minutes"
        else
          echo "‚ùå Smithery.ai update failed with HTTP $RESPONSE"
          echo "Response details (filtered):"
          # Show only error message, not full response
          grep -E "(error|message|detail)" response_body.txt | head -10 || echo "No detailed error message available"
          
          # Don't fail the workflow for Smithery.ai issues (optional service)
          echo "‚ö†Ô∏è  Smithery.ai update failed, but continuing workflow"
          echo "You can manually update the registry later"
        fi
        
        # Secure cleanup - ensure sensitive data is removed
        if [ -f smithery_payload.json ]; then
          shred -vfz -n 3 smithery_payload.json 2>/dev/null || rm -f smithery_payload.json
        fi
        if [ -f response_body.txt ]; then
          shred -vfz -n 3 response_body.txt 2>/dev/null || rm -f response_body.txt
        fi
        
        echo "üßπ Cleanup completed"

  # Post-Release Notifications
  notify:
    name: Post-Release Notifications
    needs: [test-installation, update-smithery]
    runs-on: ubuntu-latest
    
    steps:
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
    - name: Send success notification
      run: |
        echo "üéâ PyDoll MCP Server ${{ steps.version.outputs.version }} successfully released!"
        echo ""
        echo "üì¶ PyPI: https://pypi.org/project/pydoll-mcp/"
        echo "üìã GitHub Release: https://github.com/JinsongRoh/pydoll-mcp/releases/tag/${{ steps.version.outputs.version }}"
        echo "üìö Documentation: https://github.com/JinsongRoh/pydoll-mcp/wiki"
        echo "üîç Smithery.ai: https://smithery.ai/package/pydoll-mcp"
        echo ""
        echo "üöÄ Users can now install with: pip install pydoll-mcp"
        echo "üîß Automatically available in MCP registries!"
