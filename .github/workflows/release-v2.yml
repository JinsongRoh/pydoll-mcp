name: 🚀 Release and Deploy PyDoll MCP Server v2

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.5.14
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Version to release (e.g., 1.5.14)'
        required: true
        type: string

env:
  PACKAGE_NAME: pydoll-mcp

jobs:
  create-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: 🔽 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏷️ Get Version Information
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG="v${VERSION}"
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        echo "Tag: ${TAG}"
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: 🔧 Build Package
      run: |
        python -m build
        
    - name: ✅ Verify Package
      run: |
        twine check dist/*
        echo "Package contents:"
        ls -la dist/
    
    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        if [ -f "RELEASE_NOTES_v${{ steps.get_version.outputs.version }}.md" ]; then
          echo "Found release notes file: RELEASE_NOTES_v${{ steps.get_version.outputs.version }}.md"
          cp "RELEASE_NOTES_v${{ steps.get_version.outputs.version }}.md" release_notes.md
        else
          echo "Release notes file not found, generating default notes"
          cat > release_notes.md << 'EOF'
        # PyDoll MCP Server ${{ steps.get_version.outputs.tag }}
        
        ## 🚀 What's New
        
        This release includes important updates and improvements to PyDoll MCP Server.
        
        ## 📦 Installation
        
        ```bash
        pip install --upgrade pydoll-mcp==${{ steps.get_version.outputs.version }}
        ```
        
        ## 🔗 Links
        
        - **PyPI**: https://pypi.org/project/pydoll-mcp/${{ steps.get_version.outputs.version }}/
        - **GitHub**: https://github.com/JinsongRoh/pydoll-mcp
        - **Smithery.ai**: https://smithery.ai/server/@JinsongRoh/pydoll-mcp
        
        EOF
        fi
    
    - name: 🎉 Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        release_name: "🚀 PyDoll MCP Server ${{ steps.get_version.outputs.tag }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
    
    - name: 📤 Upload Wheel Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-py3-none-any.whl
        asset_name: ${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
    
    - name: 📤 Upload Source Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: ${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  deploy-pypi:
    name: 📦 Deploy to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: 🔽 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Install Build Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: 🔧 Build Package
      run: |
        python -m build
        
    - name: ✅ Verify Package
      run: |
        twine check dist/*
        
    - name: 📤 Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Uploading to PyPI..."
        twine upload dist/* --verbose
    
    - name: ✅ Verify PyPI Upload
      run: |
        sleep 30  # Wait for PyPI to process
        pip index versions pydoll-mcp || echo "Package not yet available"

  update-smithery:
    name: 🤖 Update Smithery.ai Registry
    runs-on: ubuntu-latest
    needs: [create-release, deploy-pypi]
    
    steps:
    - name: 🔽 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 📝 Update smithery.json version
      run: |
        # Update version in smithery.json
        VERSION=${{ needs.create-release.outputs.version }}
        sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${VERSION}\"/" smithery.json
        echo "Updated smithery.json version to ${VERSION}"
        cat smithery.json
    
    - name: 🤖 Trigger Smithery.ai Update
      env:
        SMITHERY_API_URL: "https://server.smithery.ai/@smithery-ai/github/mcp"
        SMITHERY_API_KEY: ${{ secrets.SMITHERY_API_KEY }}
        SMITHERY_PROFILE: ${{ secrets.SMITHERY_PROFILE }}
      run: |
        echo "Triggering Smithery.ai update..."
        
        # Method 1: GitHub-based update trigger
        curl -X GET "${SMITHERY_API_URL}?api_key=${SMITHERY_API_KEY}&profile=${SMITHERY_PROFILE}" \
          -H "Accept: application/json" \
          -v || echo "Smithery GitHub trigger failed"
        
        # Method 2: Direct API update (if available)
        if [ -n "${SMITHERY_API_KEY}" ]; then
          curl -X POST "https://api.smithery.ai/v1/servers/update" \
            -H "Authorization: Bearer ${SMITHERY_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "pydoll-mcp",
              "version": "${{ needs.create-release.outputs.version }}",
              "repository": "https://github.com/JinsongRoh/pydoll-mcp"
            }' \
            -v || echo "Smithery direct API update failed"
        fi
        
        echo "Smithery.ai update triggered"

  verify-deployment:
    name: 🔍 Verify Deployment
    runs-on: ubuntu-latest
    needs: [create-release, deploy-pypi, update-smithery]
    if: always()  # Run even if previous jobs fail
    
    steps:
    - name: 🔽 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 🔍 Check GitHub Release
      run: |
        echo "Checking GitHub release..."
        curl -s "https://api.github.com/repos/JinsongRoh/pydoll-mcp/releases/tags/${{ needs.create-release.outputs.tag }}" | \
          jq -r '.name, .html_url' || echo "GitHub release check failed"
    
    - name: 🔍 Check PyPI Package
      run: |
        echo "Checking PyPI package..."
        sleep 60  # Wait for PyPI to fully process
        pip install pydoll-mcp==${{ needs.create-release.outputs.version }} --dry-run || \
          echo "PyPI package not yet available"
        
        # Check PyPI API
        curl -s "https://pypi.org/pypi/pydoll-mcp/json" | \
          jq -r '.info.version, .urls[0].url' || echo "PyPI API check failed"
    
    - name: 🔍 Check Smithery.ai
      run: |
        echo "Checking Smithery.ai..."
        curl -s "https://smithery.ai/api/servers/@JinsongRoh/pydoll-mcp" || \
          echo "Smithery.ai check failed (API might not be public)"
    
    - name: 📊 Generate Deployment Report
      run: |
        DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        cat > DEPLOYMENT_REPORT_${{ needs.create-release.outputs.tag }}.md << EOF
        # 🚀 PyDoll MCP Server ${{ needs.create-release.outputs.tag }} - Deployment Report
        
        **Release Date**: ${DATE}
        **Version**: ${{ needs.create-release.outputs.version }}
        **Tag**: ${{ needs.create-release.outputs.tag }}
        
        ## 📦 Deployment Status
        
        ### ✅ GitHub Release
        - **Status**: ${{ needs.create-release.result }}
        - **URL**: https://github.com/JinsongRoh/pydoll-mcp/releases/tag/${{ needs.create-release.outputs.tag }}
        
        ### 📦 PyPI Package  
        - **Status**: ${{ needs.deploy-pypi.result }}
        - **URL**: https://pypi.org/project/pydoll-mcp/${{ needs.create-release.outputs.version }}/
        - **Install**: \`pip install pydoll-mcp==${{ needs.create-release.outputs.version }}\`
        
        ### 🤖 Smithery.ai Registry
        - **Status**: ${{ needs.update-smithery.result }}
        - **URL**: https://smithery.ai/server/@JinsongRoh/pydoll-mcp
        
        ## 🔧 Quick Test
        
        \`\`\`bash
        pip install --upgrade pydoll-mcp==${{ needs.create-release.outputs.version }}
        python -c "import pydoll_mcp; print(f'Version: {pydoll_mcp.__version__}')"
        \`\`\`
        
        ---
        **Generated**: ${DATE}  
        **Workflow**: https://github.com/JinsongRoh/pydoll-mcp/actions
        EOF
        
        echo "Deployment report generated"
        cat DEPLOYMENT_REPORT_${{ needs.create-release.outputs.tag }}.md
    
    - name: 📤 Upload Deployment Report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report-${{ needs.create-release.outputs.tag }}
        path: DEPLOYMENT_REPORT_${{ needs.create-release.outputs.tag }}.md
        retention-days: 90

  notify-completion:
    name: 📢 Deployment Complete
    runs-on: ubuntu-latest
    needs: [create-release, deploy-pypi, update-smithery, verify-deployment]
    if: always()
    
    steps:
    - name: 📢 Summary
      run: |
        echo "🎉 PyDoll MCP Server ${{ needs.create-release.outputs.tag }} Deployment Summary"
        echo ""
        echo "📦 GitHub Release: ${{ needs.create-release.result }}"
        echo "📦 PyPI Deploy: ${{ needs.deploy-pypi.result }}"
        echo "🤖 Smithery Update: ${{ needs.update-smithery.result }}"
        echo "🔍 Verification: ${{ needs.verify-deployment.result }}"
        echo ""
        echo "🔗 GitHub: https://github.com/JinsongRoh/pydoll-mcp/releases/tag/${{ needs.create-release.outputs.tag }}"
        echo "📦 PyPI: https://pypi.org/project/pydoll-mcp/${{ needs.create-release.outputs.version }}/"
        echo "🤖 Smithery: https://smithery.ai/server/@JinsongRoh/pydoll-mcp"
        echo ""
        echo "✅ Deployment workflow completed!"