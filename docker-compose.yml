# PyDoll MCP Server - Docker Compose Configuration
# Production-ready deployment with comprehensive configuration options

version: '3.8'

services:
  # Main PyDoll MCP Server service
  pydoll-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYDOLL_VERSION: "1.0.0"
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    image: jinsongroh/pydoll-mcp:latest
    container_name: pydoll-mcp-server
    restart: unless-stopped
    
    # Environment configuration
    environment:
      # Logging configuration
      PYDOLL_LOG_LEVEL: ${PYDOLL_LOG_LEVEL:-INFO}
      PYDOLL_DEBUG: ${PYDOLL_DEBUG:-0}
      
      # Browser configuration
      PYDOLL_BROWSER_TYPE: ${PYDOLL_BROWSER_TYPE:-chrome}
      PYDOLL_HEADLESS: ${PYDOLL_HEADLESS:-true}
      PYDOLL_WINDOW_WIDTH: ${PYDOLL_WINDOW_WIDTH:-1920}
      PYDOLL_WINDOW_HEIGHT: ${PYDOLL_WINDOW_HEIGHT:-1080}
      
      # Automation configuration
      PYDOLL_STEALTH_MODE: ${PYDOLL_STEALTH_MODE:-true}
      PYDOLL_AUTO_CAPTCHA_BYPASS: ${PYDOLL_AUTO_CAPTCHA_BYPASS:-true}
      PYDOLL_TIMEOUT: ${PYDOLL_TIMEOUT:-30}
      
      # Network configuration
      PYDOLL_PROXY_SERVER: ${PYDOLL_PROXY_SERVER:-}
      PYDOLL_USER_AGENT: ${PYDOLL_USER_AGENT:-}
      
      # Performance configuration
      PYDOLL_MAX_BROWSER_INSTANCES: ${PYDOLL_MAX_BROWSER_INSTANCES:-3}
      PYDOLL_MAX_TABS_PER_BROWSER: ${PYDOLL_MAX_TABS_PER_BROWSER:-10}
      PYDOLL_BROWSER_MEMORY_LIMIT: ${PYDOLL_BROWSER_MEMORY_LIMIT:-1024}
      
      # Docker-specific settings
      PYDOLL_DOCKER: "true"
      DISPLAY: ${DISPLAY:-:99}
    
    # Port mapping (for future web interface)
    ports:
      - "${PYDOLL_PORT:-8080}:8080"
    
    # Volume mounts
    volumes:
      # Configuration files
      - ./config:/app/config:ro
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      
      # Browser profile persistence (optional)
      - pydoll_browser_profiles:/home/appuser/.config/google-chrome
      
      # Shared memory for browser (important for stability)
      - /dev/shm:/dev/shm
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${PYDOLL_MEMORY_LIMIT:-2G}
          cpus: ${PYDOLL_CPU_LIMIT:-2.0}
        reservations:
          memory: ${PYDOLL_MEMORY_RESERVATION:-512M}
          cpus: ${PYDOLL_CPU_RESERVATION:-0.5}
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    
    # Capabilities (minimal required for browser)
    cap_add:
      - SYS_ADMIN  # Required for Chrome sandbox
    
    # Temporary filesystem for security
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-m", "pydoll_mcp.server", "--test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Dependency ordering
    depends_on:
      - pydoll-xvfb
    
    # Network configuration
    networks:
      - pydoll-network

  # X11 Virtual Framebuffer (for headless browser display)
  pydoll-xvfb:
    image: selenium/standalone-chrome:latest
    container_name: pydoll-xvfb
    restart: unless-stopped
    
    environment:
      - DISPLAY=:99
      - SCREEN_WIDTH=1920
      - SCREEN_HEIGHT=1080
      - SCREEN_DEPTH=24
    
    # Shared memory
    shm_size: 2gb
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: 1.0
        reservations:
          memory: 256M
          cpus: 0.25
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4444/wd/hub/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    
    # Network configuration
    networks:
      - pydoll-network

  # Optional: Redis for caching and session management
  pydoll-redis:
    image: redis:7-alpine
    container_name: pydoll-redis
    restart: unless-stopped
    
    # Configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volume for persistence
    volumes:
      - pydoll_redis_data:/data
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: 0.5
        reservations:
          memory: 64M
          cpus: 0.1
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    
    # Network configuration
    networks:
      - pydoll-network
    
    # Only start if caching is enabled
    profiles:
      - caching

# Named volumes for data persistence
volumes:
  pydoll_browser_profiles:
    driver: local
    labels:
      description: "Browser profiles and cache data"
  
  pydoll_redis_data:
    driver: local
    labels:
      description: "Redis cache and session data"

# Custom network for service communication
networks:
  pydoll-network:
    driver: bridge
    labels:
      description: "PyDoll MCP Server internal network"

# Development override file hint
# Create docker-compose.override.yml for local development settings
# Example:
# version: '3.8'
# services:
#   pydoll-mcp:
#     environment:
#       PYDOLL_DEBUG: "1"
#       PYDOLL_LOG_LEVEL: "DEBUG"
#       PYDOLL_HEADLESS: "false"
#     volumes:
#       - .:/app:ro
#     ports:
#       - "8080:8080"
#       - "5900:5900"  # VNC port for debugging
