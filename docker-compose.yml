# PyDoll MCP Server Docker Compose Configuration
# Provides easy deployment and management of PyDoll MCP Server containers

version: '3.8'

services:
  # Main PyDoll MCP Server
  pydoll-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    image: pydoll-mcp:latest
    container_name: pydoll-mcp-server
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - PYDOLL_LOG_LEVEL=INFO
      - PYDOLL_BROWSER_TYPE=chrome
      - PYDOLL_HEADLESS=true
      - PYDOLL_STEALTH_MODE=true
      - PYDOLL_AUTO_CAPTCHA_BYPASS=true
      - PYDOLL_MAX_BROWSERS=3
      - PYDOLL_MAX_TABS_PER_BROWSER=10
      - PYDOLL_CLEANUP_INTERVAL=300
      - PYDOLL_IDLE_TIMEOUT=1800
    
    # Volume mounts for persistence
    volumes:
      - ./data/logs:/app/logs
      - ./data/screenshots:/app/screenshots
      - ./data/downloads:/app/downloads
      - ./data/config:/app/config
      - ./data/chrome-data:/home/pydoll/.config/google-chrome
    
    # Port mapping (if HTTP interface is added)
    ports:
      - "8080:8080"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Shared memory for Chrome
    shm_size: '2gb'
    
    # Security options
    security_opt:
      - seccomp:unconfined
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import pydoll_mcp; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Optional: Monitoring service (Prometheus metrics)
  # Uncomment if you want to monitor PyDoll MCP Server
  # monitoring:
  #   image: prom/prometheus:latest
  #   container_name: pydoll-monitoring
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Log aggregation service
  # Uncomment if you want centralized logging
  # logging:
  #   image: grafana/loki:latest
  #   container_name: pydoll-loki
  #   restart: unless-stopped
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ./logging/loki-config.yml:/etc/loki/local-config.yaml
  #     - loki_data:/tmp/loki

# Named volumes for data persistence
volumes:
  prometheus_data:
    driver: local
  loki_data:
    driver: local

# Networks for service communication
networks:
  default:
    name: pydoll-network
    driver: bridge

---

# Additional compose files for different environments

# Development environment (docker-compose.dev.yml)
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# version: '3.8'
# services:
#   pydoll-mcp:
#     build:
#       target: development
#     environment:
#       - PYDOLL_LOG_LEVEL=DEBUG
#       - PYDOLL_DEBUG=1
#       - PYDOLL_HEADLESS=false
#     volumes:
#       - .:/app
#       - /tmp/.X11-unix:/tmp/.X11-unix:rw
#     environment:
#       - DISPLAY=${DISPLAY}

# Production environment (docker-compose.prod.yml)
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

# version: '3.8'
# services:
#   pydoll-mcp:
#     image: jinsongroh/pydoll-mcp:latest
#     environment:
#       - PYDOLL_LOG_LEVEL=WARNING
#       - PYDOLL_PERFORMANCE_MODE=1
#     deploy:
#       replicas: 2
#       resources:
#         limits:
#           memory: 4G
#           cpus: '2.0'
#       restart_policy:
#         condition: on-failure
#         delay: 5s
#         max_attempts: 3

# Usage Examples:
#
# 1. Start the service:
#    docker-compose up -d
#
# 2. View logs:
#    docker-compose logs -f pydoll-mcp
#
# 3. Stop the service:
#    docker-compose down
#
# 4. Restart the service:
#    docker-compose restart pydoll-mcp
#
# 5. Update and restart:
#    docker-compose pull
#    docker-compose up -d
#
# 6. Run a test:
#    docker-compose exec pydoll-mcp python -m pydoll_mcp.cli test
#
# 7. Access container shell:
#    docker-compose exec pydoll-mcp bash
#
# 8. View resource usage:
#    docker-compose top
#
# 9. Clean up everything:
#    docker-compose down -v --remove-orphans